# -*- coding: utf-8 -*-
"""ViT-based Classification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rniiFTkP7o0pyikOpvTxCewTJsgQfa3t
"""

import torch
from torch.utils.data import DataLoader, Dataset
from torchvision import transforms
from PIL import Image
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve
import matplotlib.pyplot as plt
import os
import glob
import numpy as np

# A simple custom Dataset class to load images and labels
class RealFakeDataset(Dataset):
    def __init__(self, image_paths, labels, transform=None):
        self.image_paths = image_paths
        self.labels = labels
        self.transform = transform

    def __len__(self):
        return len(self.image_paths)

    def __getitem__(self, idx):
        img_path = self.image_paths[idx]
        image = Image.open(img_path).convert("RGB")
        label = self.labels[idx]
        if self.transform:
            image = self.transform(image)
        return image, label

# Function to load and split the dataset
def load_dataset(data_dir, test_size=0.15, val_size=0.15, random_state=42):
    real_paths = glob.glob(os.path.join(data_dir, "real_vs_ai_visuals", "real", "*.jpg"))
    fake_paths = glob.glob(os.path.join(data_dir, "real_vs_ai_visuals", "ai_images", "*.jpg"))

    all_paths = real_paths + fake_paths
    all_labels = [0] * len(real_paths) + [1] * len(fake_paths)

    # Stratified split to ensure class balance
    train_paths, test_paths, train_labels, test_labels = train_test_split(
        all_paths, all_labels, test_size=test_size, stratify=all_labels, random_state=random_state
    )
    train_paths, val_paths, train_labels, val_labels = train_test_split(
        train_paths, train_labels, test_size=val_size / (1 - test_size), stratify=train_labels, random_state=random_state
    )

    print(f"Total samples: {len(all_paths)}")
    print(f"Training samples: {len(train_paths)}")
    print(f"Validation samples: {len(val_paths)}")
    print(f"Test samples: {len(test_paths)}")

    return train_paths, train_labels, val_paths, val_labels, test_paths, test_labels

# Function to get data transformations
def get_transforms():
    # Training transformations with augmentation
    train_transforms = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.RandomHorizontalFlip(p=0.5),
        transforms.ColorJitter(brightness=0.1, contrast=0.1),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])

    # Validation and test transformations without heavy augmentation
    val_test_transforms = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    return train_transforms, val_test_transforms

# Function to train the model
def train_model(model, train_loader, val_loader, epochs=20, learning_rate=3e-5):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    optimizer = torch.optim.AdamW(model.parameters(), lr=learning_rate)
    criterion = torch.nn.CrossEntropyLoss()

    best_val_accuracy = 0.0

    for epoch in range(epochs):
        model.train()
        running_loss = 0.0
        correct_preds = 0
        total_preds = 0

        for i, (images, labels) in enumerate(train_loader):
            images, labels = images.to(device), labels.to(device)
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()

            _, predicted = torch.max(outputs.data, 1)
            total_preds += labels.size(0)
            correct_preds += (predicted == labels).sum().item()

        train_accuracy = 100 * correct_preds / total_preds
        print(f"Epoch {epoch+1}/{epochs} - Training Loss: {running_loss/len(train_loader):.4f}, Training Accuracy: {train_accuracy:.2f}%")

        # Validation phase
        model.eval()
        val_correct_preds = 0
        val_total_preds = 0
        with torch.no_grad():
            for images, labels in val_loader:
                images, labels = images.to(device), labels.to(device)
                outputs = model(images)
                _, predicted = torch.max(outputs.data, 1)
                val_total_preds += labels.size(0)
                val_correct_preds += (predicted == labels).sum().item()

        val_accuracy = 100 * val_correct_preds / val_total_preds
        print(f"Validation Accuracy: {val_accuracy:.2f}%")

        if val_accuracy > best_val_accuracy:
            best_val_accuracy = val_accuracy
            torch.save(model.state_dict(), "best_vit_model.pth")
            print("✔️ Saved new best model")

    print("Training complete.")

# Function to evaluate the model
def evaluate_model(model, test_loader):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model.to(device)
    model.eval()

    y_true = []
    y_pred = []
    y_scores = []

    with torch.no_grad():
        for images, labels in test_loader:
            images, labels = images.to(device), labels.to(device)
            outputs = model(images)
            _, predicted = torch.max(outputs, 1)

            y_true.extend(labels.cpu().numpy())
            y_pred.extend(predicted.cpu().numpy())
            y_scores.extend(torch.nn.functional.softmax(outputs, dim=1)[:, 1].cpu().numpy())

    print("\n--- Evaluation on Test Set ---")
    print(classification_report(y_true, y_pred, target_names=["Real", "Fake"]))

    # Calculate and plot Confusion Matrix
    cm = confusion_matrix(y_true, y_pred)
    plt.figure(figsize=(8, 6))
    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)
    plt.title('Confusion Matrix')
    plt.colorbar()
    tick_marks = np.arange(2)
    plt.xticks(tick_marks, ["Real", "Fake"])
    plt.yticks(tick_marks, ["Real", "Fake"])
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.show()

    # Calculate and plot ROC Curve
    auc_score = roc_auc_score(y_true, y_scores)
    fpr, tpr, _ = roc_curve(y_true, y_scores)
    plt.figure(figsize=(8, 6))
    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {auc_score:.2f})')
    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic (ROC) Curve')
    plt.legend(loc="lower right")
    plt.show()

def main():
    # Import ViT model (requires an internet connection)
    from torchvision.models import vit_b_16, ViT_B_16_Weights

    data_dir = "."  # Assuming the dataset is in the same directory

    # Load and split dataset
    train_paths, train_labels, val_paths, val_labels, test_paths, test_labels = load_dataset(data_dir)

    # Get transformations
    train_transforms, val_test_transforms = get_transforms()

    # Create datasets
    train_dataset = RealFakeDataset(train_paths, train_labels, transform=train_transforms)
    val_dataset = RealFakeDataset(val_paths, val_labels, transform=val_test_transforms)
    test_dataset = RealFakeDataset(test_paths, test_labels, transform=val_test_transforms)

    # Create data loaders
    train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
    val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)
    test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)

    # Initialize ViT model with pre-trained weights
    model = vit_b_16(weights=ViT_B_16_Weights.IMAGENET1K_SWAG_E2E_V1)

    # Modify the final classification head for binary classification
    # Number of input features to the head
    num_ftrs = model.heads.head.in_features
    # Redefine the classification head with 2 output features (real, fake)
    model.heads.head = torch.nn.Linear(num_ftrs, 2)

    # Train the model
    train_model(model, train_loader, val_loader)

    # Load the best model checkpoint and evaluate
    model.load_state_dict(torch.load("best_vit_model.pth"))
    evaluate_model(model, test_loader)

if __name__ == "__main__":
    main()